package mocks

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import tes "github.com/ohsu-comp-bio/funnel/proto/tes"

// TaskServiceClient is an autogenerated mock type for the TaskServiceClient type
type TaskServiceClient struct {
	mock.Mock
}

// CancelTask provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) CancelTask(ctx context.Context, in *tes.CancelTaskRequest, opts ...grpc.CallOption) (*tes.CancelTaskResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *tes.CancelTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.CancelTaskRequest, ...grpc.CallOption) *tes.CancelTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.CancelTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.CancelTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) CreateTask(ctx context.Context, in *tes.Task, opts ...grpc.CallOption) (*tes.CreateTaskResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *tes.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.Task, ...grpc.CallOption) *tes.CreateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.Task, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInfo provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) GetServiceInfo(ctx context.Context, in *tes.ServiceInfoRequest, opts ...grpc.CallOption) (*tes.ServiceInfo, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *tes.ServiceInfo
	if rf, ok := ret.Get(0).(func(context.Context, *tes.ServiceInfoRequest, ...grpc.CallOption) *tes.ServiceInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.ServiceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.ServiceInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) GetTask(ctx context.Context, in *tes.GetTaskRequest, opts ...grpc.CallOption) (*tes.Task, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *tes.Task
	if rf, ok := ret.Get(0).(func(context.Context, *tes.GetTaskRequest, ...grpc.CallOption) *tes.Task); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.GetTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) ListTasks(ctx context.Context, in *tes.ListTasksRequest, opts ...grpc.CallOption) (*tes.ListTasksResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *tes.ListTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.ListTasksRequest, ...grpc.CallOption) *tes.ListTasksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.ListTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.ListTasksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
