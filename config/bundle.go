// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xe1\x6f\xdb\xba\x11\xff\x9e\xbf\xe2\x96\x74\x58\x0b\x58\x8a\xb3\xe2\x0d\x7b\x06\xf2\x21\x71\xd2\x34\x78\x69\xeb\xc5\xee\xba\xed\x4b\x40\x89\x27\x89\x2f\x12\xa9\x92\x94\x5d\x35\xeb\xff\x3e\x1c\x49\x49\x76\xea\xd4\xde\x5e\x06\x6c\xfd\x50\xc4\xe2\xdd\xef\x8e\x77\xc7\x1f\x79\x37\x47\xbd\x44\x3d\x39\x00\x38\x82\x19\xb3\x05\x58\x05\xb6\x40\xe0\xcc\xb2\x84\x19\x84\x4c\x94\x18\x1f\x00\x5c\x9c\xd3\xf2\x04\xe2\xe3\xac\x91\x12\xcb\x68\xa5\xf4\x7d\xc4\x85\x0e\xbf\x63\x9e\x1c\x38\x94\xb7\xca\x58\xc9\x2a\x04\x95\x39\xa4\x37\x6e\x19\x8c\x33\x14\xc3\x3b\x26\x64\xd9\x8e\xc0\x16\xc2\x80\x30\xd0\x18\xe4\x90\xb4\xc0\x1a\xab\x22\x93\xb2\x12\xb5\x71\x38\x56\x41\xaa\x64\x26\xf2\x46\x23\x90\x31\xd4\x86\x1c\x21\xfc\xf7\xac\xc2\x09\x94\x2a\x65\x65\xa1\x8c\xf5\x86\x67\x4a\x5b\x0f\x97\x29\x0d\x6f\x17\x8b\x19\xa4\xaa\xaa\x1a\x29\x52\x66\x85\x92\xc0\x24\x77\x1e\xad\x30\x01\xce\x4c\x91\x28\xa6\xb9\x83\x5c\x2c\x66\xa4\x3d\x81\x3f\x8f\xc7\xe3\x6d\x68\xb7\xb3\xe9\x26\x18\xa9\xdd\xce\xa6\x5e\xeb\xe7\xf1\xcf\x41\xeb\x16\x3f\x37\x42\x23\x24\xcc\x88\x94\xf6\x54\xa0\xb4\x9d\x7d\x02\x22\xfb\x3e\x14\x70\x36\xbb\xa6\xed\x0b\x99\x03\x83\x9a\x19\xb3\x52\xde\x9d\x23\xb8\xce\x9c\xe9\x11\x54\xec\x1e\xc1\x50\x04\xac\x82\x5a\xab\x1a\x75\xd9\x82\x46\x63\xb5\x48\x2d\xb0\x34\x45\x63\xba\x9c\xf9\x70\xb9\x8c\x39\x94\x97\x18\xe7\x31\xa4\x45\xa5\x38\xfc\x69\x3c\x86\x90\x28\x2f\x16\xb7\x55\xf9\x2a\xa4\xdd\x9b\x9e\x00\x4b\xd2\x93\x3f\xbe\xf6\x3b\xb9\x96\x69\xd9\x70\x04\x06\x87\x53\x96\x16\x18\x4d\x95\xb4\x5a\x95\x13\x90\x2a\x32\x56\x69\x3c\xf4\x31\x2e\x90\x71\xd4\x20\x24\x5c\xa1\x3d\xbe\x11\xc6\x92\x7f\xb5\x92\x06\xfb\x44\xd6\x1a\x97\x28\x2d\xa4\x2c\x2d\x68\xbf\x49\x0b\x42\x5a\xd4\x15\x72\xc1\x74\xeb\x22\x22\x52\x74\xf9\xbd\x10\x86\x25\x25\x12\xb6\x33\x3c\x01\xab\x1b\xf4\x4e\xdd\x88\x4a\x58\x1f\x43\xf1\xd5\x57\x18\x33\xf7\x80\x5f\x30\x6d\xac\xd2\x50\xaa\xdc\xc0\x4b\x63\xb9\x6a\xec\x31\x6a\xfd\x6a\x44\x7e\x25\xad\xf5\xd0\xef\xd8\x97\xcb\x20\x7a\xa3\xf2\xb9\xf8\x8a\x13\x38\x19\x8f\xc7\x63\x38\x82\x93\x31\xfc\x72\x4e\x56\x6e\x54\x9e\xfb\x13\xe1\x2c\xaa\x3c\x27\x8f\x4b\x5c\x62\x69\x26\xc0\x31\x69\x72\x42\xcd\xd4\x08\x50\x6b\xa5\x9d\xe0\x0d\x2d\x4f\xdc\xe7\xa0\xf8\x49\x0b\x8b\xde\x21\x97\x1e\x61\xa0\x66\xb6\x88\x29\xb7\x58\xd5\xb6\x1d\xf9\x45\x46\xd5\xad\x85\xb5\x28\x49\xd0\x58\x8e\x5a\xc7\x0e\xe4\x43\x63\xeb\xc6\xbe\x11\x25\x4e\xe0\xf0\xf0\xe0\x60\x9e\x16\xc8\x9b\xb2\x3b\xae\x6f\xd5\x0a\x54\x16\xf4\x74\x23\x81\x81\xe9\x24\x40\x58\xd4\x7d\xa1\x52\x36\x41\x32\xa9\x0c\xa6\x4a\x72\x17\x8b\x0e\xec\x96\xd9\x2e\x0a\xe3\x2e\x14\xe0\xe5\x7a\x2b\x15\x93\xad\x8b\xb4\xdb\x4b\x67\x84\x42\xab\x24\x6e\x9a\xea\x60\xa7\x45\x23\xef\x09\xb7\x07\x29\x95\xcc\x49\x7d\xc5\x84\x85\x04\xed\x0a\x51\x42\x53\x73\x66\xd1\x40\x82\x99\xd2\x08\x15\xd3\xf7\xfe\x3c\x48\xc5\x11\x38\x32\xfe\x94\xff\xef\x15\xc7\x99\x90\xf9\x42\x54\xa8\x1a\x3b\xa1\x0a\xdf\xd8\x43\x25\x64\x63\x71\xbb\x79\x3a\x89\xc1\x86\x8b\x39\xd3\x76\xf4\xd8\x07\xaa\xb2\xbd\xbc\xb8\x96\xc2\xf6\x5e\xbc\x1e\x6f\xb8\xf1\x53\x70\xc3\x04\xd9\xae\xac\x86\x22\x08\x6e\x5c\x5f\xc0\x4a\x94\x25\x24\xe8\x98\xb0\x62\xc4\x1a\x65\xd9\x42\x8e\x92\xc2\x8b\xdc\xd7\xc4\xf5\x85\xab\x05\x8f\x42\xac\xc4\x38\xd7\xc4\x01\xdb\xd8\xd6\x89\x79\x86\x3f\xf3\x62\x6b\xa4\x39\xe9\x58\x6b\x9d\x03\x5c\x64\x06\xf2\x8a\x61\x25\xe8\x4e\xd8\x24\xad\x38\x28\x79\xe4\x6d\xf4\x41\xab\x54\xb7\x06\x52\x8d\xe4\x3c\xf0\x46\x53\x50\x6b\xad\x88\xb1\xe8\xcf\x6e\xbb\x5d\xf1\x0b\xe9\x4f\x09\x17\x1a\x53\xab\x74\xeb\xcd\x7c\x52\xfa\xfe\x42\xe8\x2d\x17\xcf\x10\xca\x3e\x55\x05\xa3\x52\x22\x30\x5e\xa2\xdb\x0b\xa5\x1d\x89\x76\x99\x74\x62\xd6\x27\x6a\x04\xc2\x7a\x0f\x4c\xd1\x58\xe0\x6a\x25\xbb\x5d\x45\x27\x50\x21\x93\x86\xc4\x35\xd2\x15\x25\x55\xa7\x16\xc3\xb8\x5b\xf4\x1f\x40\x54\x8e\xc3\x2c\x96\x2d\xb0\xcc\xa2\x67\xf8\x4c\x68\x63\xdd\x89\xf1\xa8\x7d\x79\x44\x27\x5d\x78\xce\x5c\x3d\x78\x1f\x36\x33\x6e\x75\x4b\x55\xc9\xd1\x62\x6a\x61\x55\x30\x47\xa8\xaa\xd1\x29\x7a\xba\x60\x4b\x26\x4a\xe2\x48\x12\x13\x36\x86\x00\x79\x81\x99\x90\x14\xda\xdb\x5e\x5c\xf8\x5d\x3b\x53\xdd\x6d\xea\x2f\x23\xb5\x44\xad\x05\x47\xe3\xa3\x9e\x60\xc1\x96\x42\x05\xe6\xe9\x01\x7c\xbd\x12\xf8\x74\xf6\xd1\x0c\x96\xe3\xe1\x7b\xdd\x98\x09\x84\x42\x72\x45\x79\xf6\x6e\x90\x73\xfc\x7b\x75\x3e\x88\xdf\xb2\xea\x2a\x99\xc0\x38\x5e\xd3\xb8\x10\xe6\x1e\x4c\xcd\x52\xfc\x81\x22\x09\x7d\xa7\xf9\xc6\x65\x78\x15\x39\x76\x06\xdb\xd0\xee\x07\x95\x0d\x82\x34\xad\x4c\x87\x6a\xde\x7c\x94\xf4\x1a\xdf\x1f\x70\xfa\xf7\xd1\x91\x94\x27\xca\x9f\x36\x4f\x77\x90\x1c\xb6\x37\x9b\xf6\xa5\x41\xe5\xe7\xf9\xed\xd8\x19\xa7\xec\xee\x67\xaa\x2f\x97\xed\xb4\xfc\x3f\x7d\x49\x1d\x1c\xc1\x82\x8e\xe3\xda\x0b\x90\xa5\x56\x2c\x71\xed\x72\x4a\x58\x7a\x8f\x92\x1f\x1c\xc1\x59\x5f\xca\xe1\x5b\xc7\x50\x23\x2a\x57\xae\xf4\x08\xf2\x14\x47\xa0\x6a\x94\xc6\xb2\xf4\xfe\xe0\xdc\xcb\x05\x31\x32\x37\x7f\x8c\x1b\x2a\xbd\x13\x75\x45\xfc\x76\x31\x75\x78\x3e\x64\x0b\xac\xea\xd2\xe5\xf3\x9f\x21\xf0\x8d\x14\x4b\xd4\x06\xe1\x14\x96\x4c\x8a\xb2\x64\x61\x21\x47\x8b\x72\x09\xa7\xb0\xa0\x57\x88\xff\xe6\xdf\x1b\xce\xed\x53\x78\x78\x88\x2f\xfb\xdf\xdf\xbe\x05\x11\xa6\xf3\xa6\x42\x69\x0d\x9c\x86\xc7\xab\xbb\xa2\xa3\x28\x3c\xd2\x1e\x1e\xa6\xee\x8f\x5e\xa1\x54\xb9\x07\x0b\x84\xf7\xed\xdb\xb1\x8f\x40\xe4\x9e\x4e\x51\xa9\xf2\xce\x3a\x25\xf4\xb1\x6c\xe0\x46\x9f\x99\x20\xa8\x5c\x6a\x9e\x96\x54\x8d\x0d\x92\xa6\x50\x4d\xc9\xef\xac\x66\xd2\x64\xa8\xef\x32\xc7\xdd\xa7\xf0\xf7\xcb\x79\x90\x58\x15\x28\xef\xac\x1a\x44\x7a\xf0\x0f\xef\xef\x2e\xff\x76\xbd\xb8\xfb\x70\x7b\x77\xf9\xd7\xeb\xe9\x22\x28\x3c\x3c\x88\x0c\x24\x42\x4c\x04\x01\x63\x88\xfa\x9d\x3e\x3c\xd4\x5a\x48\x9b\xc1\xa1\xc6\xcf\x0d\x1a\x7b\x97\x92\xc8\x29\xfc\x9e\x1f\x7a\xf1\x35\xd1\x08\x50\xf2\xb5\xdf\x01\xd4\xd1\x08\x71\xc1\x0f\x71\x2b\xac\x94\x6e\x09\x39\x1e\x67\x70\x75\x7e\x18\x14\x77\xe3\x7b\xb6\xd9\x69\x80\x13\x73\xad\xc3\x7b\xbd\x2d\xf8\xe1\xc3\xe7\x06\xfd\x5b\x76\x76\x3e\x7f\xaa\x14\x8f\x7e\x97\x08\x79\x9c\x30\x53\x74\x1f\x66\xe7\x73\x88\xde\x53\x1a\x17\xcc\xdc\x5f\x0f\xfe\xfa\x15\xb5\x3b\xc1\x5e\x10\x77\xd7\xcc\x3e\x69\xf3\x60\xa5\xbb\x72\xcd\xe9\xc9\xa4\xae\xe5\xe9\xb3\xe5\xae\x03\xaf\xb0\x3a\xa5\xb8\xe6\xc9\xb3\x65\xad\x83\xa6\xea\x1e\xb0\x77\xa5\xec\xd1\xf9\xde\x75\x9a\x0f\x00\xae\xb4\xe0\x97\x32\x17\x12\xf7\x4f\xf1\x8b\x27\x12\xfc\x62\xbf\xf4\xbe\xd8\x2b\xb9\x24\xd6\xa7\xed\xdf\x49\xf8\x0b\x88\x6a\x84\xaa\x16\xcf\x77\x46\xbd\x2f\xc5\xdd\xb2\x4b\xf4\xd5\xf3\xe5\x39\x40\x67\xd4\x24\xf6\xd8\xcf\x9c\x67\xa0\x57\xd7\xfc\xe6\xe3\xed\xbb\xa7\x93\x7c\xfc\x38\xcb\xf3\xf3\xb3\xc5\xf4\x2d\x44\xd1\xaf\x2a\x89\xdc\x15\xb9\x25\xe5\xbd\x90\xf4\x2d\xd7\xc9\x77\x0b\xfe\x06\xd8\x9d\xee\x5e\x21\x90\xf5\xce\x3a\xda\xab\x18\x7a\x54\xa2\xed\xa8\x46\x1d\xb9\x26\xfc\xf9\x2a\xa3\x37\x50\x61\xe5\xb8\xf5\x19\x99\x7b\x00\xb7\x55\x3d\x80\xff\x17\x48\x60\x7a\x39\xe9\x9b\x2b\x3f\x57\x63\x69\xaa\x1a\x69\xa9\x27\xe2\x28\xad\x60\xa5\xe9\xc7\x6b\xa1\x93\xa9\x95\x31\xc2\x3d\x7f\xdd\x63\x6c\x7b\x4b\xc8\x85\x49\xe9\xf9\xde\xf5\x84\x67\x1e\xb7\x7f\x83\x79\xb4\x2b\xa5\xf2\x12\x61\x5a\xaa\x86\x53\xdf\xf5\x2b\x75\x13\xd7\x17\xbf\xd5\xd8\xcc\x23\x3d\x65\xe8\xab\x92\xbf\x79\x3f\xff\x50\x72\xd8\xc8\x27\x14\x79\x61\xd7\x1a\x91\x99\xc6\x0c\xb5\x67\x31\xea\xeb\xac\xef\xdf\xa1\xa9\xe1\x73\x23\xd2\xfb\xb2\x1d\x1e\xd9\xef\x07\x21\xd7\x38\x95\x1a\x19\x6f\x41\xc9\x52\x48\xea\x16\x97\x08\x82\xde\x95\x32\x80\x34\xb5\x7b\xbd\x77\x00\xde\xd4\x5f\x08\x75\xee\x97\x27\x70\x12\x8f\xc3\xf6\xd6\xa7\x0a\x29\x4b\x0b\xa4\x9c\x53\x83\x4c\xed\x5a\x53\x5a\x03\x2f\x2b\x37\xef\x42\x28\x85\xb1\x23\xb0\x81\x22\xcc\x08\xd0\xa6\xaf\x02\x4c\x18\x3b\x68\xcc\x34\x9a\xa2\x6f\x60\xdc\xec\x6b\xb1\xb8\x79\x72\xb0\x71\xf0\xc9\xd5\xa0\x9f\x05\xed\x31\x09\xd8\x39\x07\xf8\x0f\xa6\x00\x3f\x9a\x01\x3c\xd3\x04\xe0\x07\xfd\x7f\x6f\x04\x8c\x55\x9a\xe5\x08\xa6\x35\x16\x2b\xef\x9a\x5b\x5d\xf4\x53\xe6\xc6\x95\x9a\x41\xfb\xa8\xf8\x92\xd6\x6f\xac\x6b\x22\x46\x90\x34\x16\x5a\xd5\x40\x45\x85\x07\x12\x91\x3b\xb7\x1c\x9e\xc8\x68\xe9\x0f\x1a\x7d\xbd\xf8\x59\x55\x20\x83\x8a\x49\x67\xc4\x8d\xc1\xbc\x43\x43\x83\x96\x32\xff\xee\x08\x2e\xfa\x1c\xbb\xcf\x43\x65\x7f\x2a\x84\x45\x2a\x15\x4a\xa1\xcb\xcf\x10\x0a\xd7\x97\x19\x58\x15\x22\x2d\xba\xd4\x0a\x03\xac\x2c\xd5\x8a\x1c\x54\x61\x16\xdc\x95\xee\x99\x5f\xb8\x10\xba\x3f\x3a\x00\x11\xc4\xc7\xdd\xfc\x61\xfe\xba\x73\x8e\xbe\x5f\x4a\x5e\x2b\x21\xed\xf0\x0d\xe0\x17\x6c\xd7\x7f\xce\x31\xd5\x68\x27\x9d\xfe\xd5\x7c\x7d\x71\x7f\x92\xf3\xff\x7f\xa8\xad\x50\x92\x95\xf1\x26\x49\xac\x2b\xed\xe2\x8a\x0d\xbc\x4c\xab\xca\xe5\x11\xe5\x52\x68\x25\xa9\xf5\x8a\xd7\xf6\xb7\x4e\x91\x1b\x8a\x67\x5b\xd1\x37\xbd\xff\x21\x36\xc0\x1b\xad\xaa\x4b\xb9\x5c\x9f\x53\x3f\x35\x97\x78\x3c\x93\xa0\x66\xd5\x5d\x9e\xd4\xfd\x75\xb3\xd0\x30\xcd\xff\x6e\x44\xb1\x6d\x66\xb0\xd7\x68\x62\xbf\xb1\xc4\xd3\xf0\x3b\xc6\x11\xa4\xfa\x8e\x7d\x11\x55\x53\x0d\x9b\x59\x1f\xc2\xbb\x61\xfd\x30\x89\xa7\x0d\x26\x4d\x46\x24\xfe\x68\x0c\x4c\x26\xcf\xdd\xca\xff\xdb\x6c\xfe\x5f\x01\x00\x00\xff\xff\x32\x77\x06\x72\x47\x1b\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 6983, mode: os.FileMode(420), modTime: time.Unix(1504739052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1504739244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1504739229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1504739239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1504739220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
